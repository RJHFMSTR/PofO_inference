// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// IBDMatrix
IntegerMatrix IBDMatrix(CharacterVector chromosomes, NumericVector positions_bp, int number_pairs, IntegerVector ibd_pairs_colnumbers, CharacterVector ibd_chromosomes, NumericVector ibd_start_bp, NumericVector ibd_stop_bp);
RcppExport SEXP _XIBD_IBDMatrix(SEXP chromosomesSEXP, SEXP positions_bpSEXP, SEXP number_pairsSEXP, SEXP ibd_pairs_colnumbersSEXP, SEXP ibd_chromosomesSEXP, SEXP ibd_start_bpSEXP, SEXP ibd_stop_bpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type chromosomes(chromosomesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type positions_bp(positions_bpSEXP);
    Rcpp::traits::input_parameter< int >::type number_pairs(number_pairsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ibd_pairs_colnumbers(ibd_pairs_colnumbersSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ibd_chromosomes(ibd_chromosomesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ibd_start_bp(ibd_start_bpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ibd_stop_bp(ibd_stop_bpSEXP);
    rcpp_result_gen = Rcpp::wrap(IBDMatrix(chromosomes, positions_bp, number_pairs, ibd_pairs_colnumbers, ibd_chromosomes, ibd_start_bp, ibd_stop_bp));
    return rcpp_result_gen;
END_RCPP
}
// calculateMissingness
NumericVector calculateMissingness(IntegerMatrix genotypes);
RcppExport SEXP _XIBD_calculateMissingness(SEXP genotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMissingness(genotypes));
    return rcpp_result_gen;
END_RCPP
}
// calculatePopAlleleFreq
NumericVector calculatePopAlleleFreq(IntegerMatrix genotypes, IntegerVector chromosomes, IntegerVector genders);
RcppExport SEXP _XIBD_calculatePopAlleleFreq(SEXP genotypesSEXP, SEXP chromosomesSEXP, SEXP gendersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chromosomes(chromosomesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type genders(gendersSEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePopAlleleFreq(genotypes, chromosomes, genders));
    return rcpp_result_gen;
END_RCPP
}
// groupPairs
CharacterMatrix groupPairs(CharacterVector group);
RcppExport SEXP _XIBD_groupPairs(SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(groupPairs(group));
    return rcpp_result_gen;
END_RCPP
}
// calculateHaplotypeFreq
NumericMatrix calculateHaplotypeFreq(IntegerMatrix genotypes, IntegerMatrix condition_snps_0, IntegerVector genders, const int chromosome, Function polyrootR);
RcppExport SEXP _XIBD_calculateHaplotypeFreq(SEXP genotypesSEXP, SEXP condition_snps_0SEXP, SEXP gendersSEXP, SEXP chromosomeSEXP, SEXP polyrootRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type condition_snps_0(condition_snps_0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type genders(gendersSEXP);
    Rcpp::traits::input_parameter< const int >::type chromosome(chromosomeSEXP);
    Rcpp::traits::input_parameter< Function >::type polyrootR(polyrootRSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateHaplotypeFreq(genotypes, condition_snps_0, genders, chromosome, polyrootR));
    return rcpp_result_gen;
END_RCPP
}
// haplotypeToGenotype
IntegerMatrix haplotypeToGenotype(IntegerMatrix haplotypes, IntegerVector chromosomes, IntegerVector genders);
RcppExport SEXP _XIBD_haplotypeToGenotype(SEXP haplotypesSEXP, SEXP chromosomesSEXP, SEXP gendersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type haplotypes(haplotypesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chromosomes(chromosomesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type genders(gendersSEXP);
    rcpp_result_gen = Rcpp::wrap(haplotypeToGenotype(haplotypes, chromosomes, genders));
    return rcpp_result_gen;
END_RCPP
}
// IBDLabel
IntegerVector IBDLabel(IntegerVector snp_id, const int number_snps);
RcppExport SEXP _XIBD_IBDLabel(SEXP snp_idSEXP, SEXP number_snpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type snp_id(snp_idSEXP);
    Rcpp::traits::input_parameter< const int >::type number_snps(number_snpsSEXP);
    rcpp_result_gen = Rcpp::wrap(IBDLabel(snp_id, number_snps));
    return rcpp_result_gen;
END_RCPP
}
// isolatePairs
CharacterMatrix isolatePairs(CharacterVector fid, CharacterVector iid);
RcppExport SEXP _XIBD_isolatePairs(SEXP fidSEXP, SEXP iidSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type fid(fidSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type iid(iidSEXP);
    rcpp_result_gen = Rcpp::wrap(isolatePairs(fid, iid));
    return rcpp_result_gen;
END_RCPP
}
// calculate_viterbi_m1
IntegerVector calculate_viterbi_m1(const int noStates, NumericVector piProb, int meiosis, const int NoSNPs, IntegerMatrix genotypes, NumericVector alleleFreq, NumericVector positionM, double error, int gender1, int gender2, int chrom);
RcppExport SEXP _XIBD_calculate_viterbi_m1(SEXP noStatesSEXP, SEXP piProbSEXP, SEXP meiosisSEXP, SEXP NoSNPsSEXP, SEXP genotypesSEXP, SEXP alleleFreqSEXP, SEXP positionMSEXP, SEXP errorSEXP, SEXP gender1SEXP, SEXP gender2SEXP, SEXP chromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type noStates(noStatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type piProb(piProbSEXP);
    Rcpp::traits::input_parameter< int >::type meiosis(meiosisSEXP);
    Rcpp::traits::input_parameter< const int >::type NoSNPs(NoSNPsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alleleFreq(alleleFreqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type positionM(positionMSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< int >::type gender1(gender1SEXP);
    Rcpp::traits::input_parameter< int >::type gender2(gender2SEXP);
    Rcpp::traits::input_parameter< int >::type chrom(chromSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_viterbi_m1(noStates, piProb, meiosis, NoSNPs, genotypes, alleleFreq, positionM, error, gender1, gender2, chrom));
    return rcpp_result_gen;
END_RCPP
}
// calculate_gamma_m1
NumericMatrix calculate_gamma_m1(const int noStates, NumericVector piProb, int meiosis, const int NoSNPs, IntegerMatrix genotypes, NumericVector alleleFreq, NumericVector positionM, double error, int gender1, int gender2, int chrom);
RcppExport SEXP _XIBD_calculate_gamma_m1(SEXP noStatesSEXP, SEXP piProbSEXP, SEXP meiosisSEXP, SEXP NoSNPsSEXP, SEXP genotypesSEXP, SEXP alleleFreqSEXP, SEXP positionMSEXP, SEXP errorSEXP, SEXP gender1SEXP, SEXP gender2SEXP, SEXP chromSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type noStates(noStatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type piProb(piProbSEXP);
    Rcpp::traits::input_parameter< int >::type meiosis(meiosisSEXP);
    Rcpp::traits::input_parameter< const int >::type NoSNPs(NoSNPsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alleleFreq(alleleFreqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type positionM(positionMSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< int >::type gender1(gender1SEXP);
    Rcpp::traits::input_parameter< int >::type gender2(gender2SEXP);
    Rcpp::traits::input_parameter< int >::type chrom(chromSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_gamma_m1(noStates, piProb, meiosis, NoSNPs, genotypes, alleleFreq, positionM, error, gender1, gender2, chrom));
    return rcpp_result_gen;
END_RCPP
}
// calculate_viterbi_m2
IntegerVector calculate_viterbi_m2(const int noStates, NumericVector piProb, int meiosis, const int NoSNPs, IntegerMatrix genotypes, NumericVector alleleFreq, NumericVector positionM, double error, int gender1, int gender2, int chrom, IntegerVector conditionSNPs, NumericMatrix haplotypeFreq);
RcppExport SEXP _XIBD_calculate_viterbi_m2(SEXP noStatesSEXP, SEXP piProbSEXP, SEXP meiosisSEXP, SEXP NoSNPsSEXP, SEXP genotypesSEXP, SEXP alleleFreqSEXP, SEXP positionMSEXP, SEXP errorSEXP, SEXP gender1SEXP, SEXP gender2SEXP, SEXP chromSEXP, SEXP conditionSNPsSEXP, SEXP haplotypeFreqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type noStates(noStatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type piProb(piProbSEXP);
    Rcpp::traits::input_parameter< int >::type meiosis(meiosisSEXP);
    Rcpp::traits::input_parameter< const int >::type NoSNPs(NoSNPsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alleleFreq(alleleFreqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type positionM(positionMSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< int >::type gender1(gender1SEXP);
    Rcpp::traits::input_parameter< int >::type gender2(gender2SEXP);
    Rcpp::traits::input_parameter< int >::type chrom(chromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type conditionSNPs(conditionSNPsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type haplotypeFreq(haplotypeFreqSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_viterbi_m2(noStates, piProb, meiosis, NoSNPs, genotypes, alleleFreq, positionM, error, gender1, gender2, chrom, conditionSNPs, haplotypeFreq));
    return rcpp_result_gen;
END_RCPP
}
// calculate_gamma_m2
NumericMatrix calculate_gamma_m2(const int noStates, NumericVector piProb, int meiosis, const int NoSNPs, IntegerMatrix genotypes, NumericVector alleleFreq, NumericVector positionM, double error, int gender1, int gender2, int chrom, IntegerVector conditionSNPs, NumericMatrix haplotypeFreq);
RcppExport SEXP _XIBD_calculate_gamma_m2(SEXP noStatesSEXP, SEXP piProbSEXP, SEXP meiosisSEXP, SEXP NoSNPsSEXP, SEXP genotypesSEXP, SEXP alleleFreqSEXP, SEXP positionMSEXP, SEXP errorSEXP, SEXP gender1SEXP, SEXP gender2SEXP, SEXP chromSEXP, SEXP conditionSNPsSEXP, SEXP haplotypeFreqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type noStates(noStatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type piProb(piProbSEXP);
    Rcpp::traits::input_parameter< int >::type meiosis(meiosisSEXP);
    Rcpp::traits::input_parameter< const int >::type NoSNPs(NoSNPsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alleleFreq(alleleFreqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type positionM(positionMSEXP);
    Rcpp::traits::input_parameter< double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< int >::type gender1(gender1SEXP);
    Rcpp::traits::input_parameter< int >::type gender2(gender2SEXP);
    Rcpp::traits::input_parameter< int >::type chrom(chromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type conditionSNPs(conditionSNPsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type haplotypeFreq(haplotypeFreqSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_gamma_m2(noStates, piProb, meiosis, NoSNPs, genotypes, alleleFreq, positionM, error, gender1, gender2, chrom, conditionSNPs, haplotypeFreq));
    return rcpp_result_gen;
END_RCPP
}
// bVectorHH
IntegerVector bVectorHH(IntegerMatrix genotypes);
RcppExport SEXP _XIBD_bVectorHH(SEXP genotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(bVectorHH(genotypes));
    return rcpp_result_gen;
END_RCPP
}
// AmatrixHH
NumericMatrix AmatrixHH(NumericVector pop_allele_freqs, IntegerMatrix genotypes);
RcppExport SEXP _XIBD_AmatrixHH(SEXP pop_allele_freqsSEXP, SEXP genotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pop_allele_freqs(pop_allele_freqsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(AmatrixHH(pop_allele_freqs, genotypes));
    return rcpp_result_gen;
END_RCPP
}
// bVectorHD
IntegerVector bVectorHD(IntegerMatrix genotypes);
RcppExport SEXP _XIBD_bVectorHD(SEXP genotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(bVectorHD(genotypes));
    return rcpp_result_gen;
END_RCPP
}
// AmatrixHD
NumericMatrix AmatrixHD(NumericVector pop_allele_freqs, IntegerMatrix genotypes);
RcppExport SEXP _XIBD_AmatrixHD(SEXP pop_allele_freqsSEXP, SEXP genotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pop_allele_freqs(pop_allele_freqsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(AmatrixHD(pop_allele_freqs, genotypes));
    return rcpp_result_gen;
END_RCPP
}
// bVectorDD
IntegerVector bVectorDD(IntegerMatrix genotypes);
RcppExport SEXP _XIBD_bVectorDD(SEXP genotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(bVectorDD(genotypes));
    return rcpp_result_gen;
END_RCPP
}
// AmatrixDD
NumericMatrix AmatrixDD(NumericVector pop_allele_freqs, IntegerMatrix genotypes);
RcppExport SEXP _XIBD_AmatrixDD(SEXP pop_allele_freqsSEXP, SEXP genotypesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pop_allele_freqs(pop_allele_freqsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type genotypes(genotypesSEXP);
    rcpp_result_gen = Rcpp::wrap(AmatrixDD(pop_allele_freqs, genotypes));
    return rcpp_result_gen;
END_RCPP
}
// topbotChange
IntegerMatrix topbotChange(IntegerMatrix Genotypes, CharacterVector topbot);
RcppExport SEXP _XIBD_topbotChange(SEXP GenotypesSEXP, SEXP topbotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type Genotypes(GenotypesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type topbot(topbotSEXP);
    rcpp_result_gen = Rcpp::wrap(topbotChange(Genotypes, topbot));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XIBD_IBDMatrix", (DL_FUNC) &_XIBD_IBDMatrix, 7},
    {"_XIBD_calculateMissingness", (DL_FUNC) &_XIBD_calculateMissingness, 1},
    {"_XIBD_calculatePopAlleleFreq", (DL_FUNC) &_XIBD_calculatePopAlleleFreq, 3},
    {"_XIBD_groupPairs", (DL_FUNC) &_XIBD_groupPairs, 1},
    {"_XIBD_calculateHaplotypeFreq", (DL_FUNC) &_XIBD_calculateHaplotypeFreq, 5},
    {"_XIBD_haplotypeToGenotype", (DL_FUNC) &_XIBD_haplotypeToGenotype, 3},
    {"_XIBD_IBDLabel", (DL_FUNC) &_XIBD_IBDLabel, 2},
    {"_XIBD_isolatePairs", (DL_FUNC) &_XIBD_isolatePairs, 2},
    {"_XIBD_calculate_viterbi_m1", (DL_FUNC) &_XIBD_calculate_viterbi_m1, 11},
    {"_XIBD_calculate_gamma_m1", (DL_FUNC) &_XIBD_calculate_gamma_m1, 11},
    {"_XIBD_calculate_viterbi_m2", (DL_FUNC) &_XIBD_calculate_viterbi_m2, 13},
    {"_XIBD_calculate_gamma_m2", (DL_FUNC) &_XIBD_calculate_gamma_m2, 13},
    {"_XIBD_bVectorHH", (DL_FUNC) &_XIBD_bVectorHH, 1},
    {"_XIBD_AmatrixHH", (DL_FUNC) &_XIBD_AmatrixHH, 2},
    {"_XIBD_bVectorHD", (DL_FUNC) &_XIBD_bVectorHD, 1},
    {"_XIBD_AmatrixHD", (DL_FUNC) &_XIBD_AmatrixHD, 2},
    {"_XIBD_bVectorDD", (DL_FUNC) &_XIBD_bVectorDD, 1},
    {"_XIBD_AmatrixDD", (DL_FUNC) &_XIBD_AmatrixDD, 2},
    {"_XIBD_topbotChange", (DL_FUNC) &_XIBD_topbotChange, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_XIBD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
